// E1: Definiciones de Fetch API y REST
// P√°gina conceptual sin demos complejos, solo definiciones claras

class DefinicionesManager {
  constructor() {
    this.init();
  }

  init() {
    this.mostrarMensajeBienvenida();
    this.actualizarCodigoResumen();
  }

  // ========== MENSAJES Y NOTIFICACIONES ==========

  mostrarMensajeBienvenida() {
    setTimeout(() => {
      this.mostrarNotificacion(
        "üì° ¬°Aprende los conceptos fundamentales de APIs y Fetch!",
        "success"
      );
    }, 500);

    // Mensaje adicional despu√©s de unos segundos
    setTimeout(() => {
      this.mostrarNotificacion(
        "‚ö° Pr√≥ximo paso: Thunder Client para ver todo en acci√≥n",
        "info"
      );
    }, 3000);
  }

  actualizarCodigoResumen() {
    const codeDisplay = document.getElementById("code-display");
    if (codeDisplay) {
      // El c√≥digo ya est√° en el HTML, pero podr√≠amos cambiarlo din√°micamente
      console.log("üìã Conceptos cargados en el panel de c√≥digo");
    }
  }

  // ========== UTILIDADES ==========

  mostrarNotificacion(mensaje, tipo = "info") {
    const notificacion = document.createElement("div");
    notificacion.className = `notificacion ${tipo}`;
    notificacion.textContent = mensaje;

    document.body.appendChild(notificacion);

    // Animaci√≥n de entrada
    setTimeout(() => notificacion.classList.add("mostrar"), 100);

    // Remover despu√©s de 4 segundos (un poco m√°s tiempo para leer)
    setTimeout(() => {
      notificacion.classList.remove("mostrar");
      setTimeout(() => {
        if (document.body.contains(notificacion)) {
          document.body.removeChild(notificacion);
        }
      }, 300);
    }, 4000);
  }
}

// ========== INICIALIZACI√ìN ==========

let definicionesManager;

document.addEventListener("DOMContentLoaded", () => {
  definicionesManager = new DefinicionesManager();

  console.log("üì° P√°gina de definiciones cargada");
  console.log("‚ö° Fetch API: Herramienta para hacer requests HTTP");
  console.log("üåê REST: Reglas para organizar endpoints de APIs");
  console.log("üöÄ Pr√≥ximo: Thunder Client para pr√°ctica visual");

  // Mostrar conceptos en consola para refuerzo
  setTimeout(() => {
    console.log("\nüéØ CONCEPTOS CLAVE:");
    console.log("‚Ä¢ Fetch = fetch(url).then(res => res.json())");
    console.log("‚Ä¢ REST = GET/POST/PUT/DELETE + URLs organizadas");
    console.log("‚Ä¢ APIs reales = Datos del mundo real");
    console.log("‚Ä¢ Thunder Client = Ver requests sin c√≥digo\n");
  }, 1000);
});

// Variable global
window.definicionesManager = definicionesManager;
