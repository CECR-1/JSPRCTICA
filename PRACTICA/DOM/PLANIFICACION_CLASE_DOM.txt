PLANIFICACI√ìN DE CLASE COMPLETA - 12 HORAS
==========================================
DOM + FETCH API + JSON + APIS EN LA NUBE

PERFIL DE ESTUDIANTES:
=====================
- Nivel: Principiantes con base s√≥lida
- Conocimientos previos: HTML, CSS, JavaScript b√°sico
- Objetivo: Crear aplicaciones web interactivas con APIs

ENFOQUE PEDAG√ìGICO:
==================
- **Combinaci√≥n:** Teor√≠a + Ejercicios progresivos + Proyecto integrador
- **Metodolog√≠a:** Aprender haciendo con ejemplos reales
- **Resultado final:** App web completa que consume APIs

TEMAS A CUBRIR EN 12 HORAS:
===========================

üìö BLOQUE 1: DOM MANIPULATION (Horas 1-5)
- ‚úÖ Qu√© es el DOM y c√≥mo funciona
- ‚úÖ Seleccionar elementos (getElementById, querySelector, querySelectorAll)
- ‚úÖ Modificar contenido (innerHTML, textContent, value)
- ‚úÖ Cambiar estilos din√°micamente (style, classList)
- ‚úÖ Eventos b√°sicos (click, input, change, submit)
- ‚úÖ Crear y eliminar elementos din√°micamente
- ‚úÖ Formularios y validaci√≥n en tiempo real

üåê BLOQUE 2: JSON + FETCH API (Horas 6-9)
- ‚úÖ Qu√© es JSON y c√≥mo manipularlo
- ‚úÖ ¬øQu√© son las APIs? (conceptos b√°sicos)
- ‚úÖ Fetch API - Sintaxis y uso pr√°ctico
- ‚úÖ GET: Obtener datos desde APIs
- ‚úÖ POST: Enviar datos hacia APIs
- ‚úÖ PUT/DELETE: Actualizar y eliminar datos
- ‚úÖ Promesas y async/await con Fetch
- ‚úÖ Manejo de errores y estados de carga

üöÄ BLOQUE 3: PROYECTO INTEGRADOR (Horas 10-12)
- ‚úÖ Planificaci√≥n de una app completa
- ‚úÖ Integraci√≥n DOM + FETCH + JSON
- ‚úÖ CRUD completo (Create, Read, Update, Delete)
- ‚úÖ Interfaz responsiva y user-friendly
- ‚úÖ Deploy y pruebas finales

DISTRIBUCI√ìN DETALLADA DE TIEMPO:
=================================
üïê HORA 1-2: FUNDAMENTOS DEL DOM
- Conceptos: Qu√© es el DOM, √°rbol de nodos
- Pr√°ctica: Seleccionar elementos (getElementById, querySelector)
- Ejercicio: Cambiar textos y contenidos b√°sicos

üïê HORA 3-4: MANIPULACI√ìN AVANZADA
- Conceptos: innerHTML vs textContent, modificar estilos
- Pr√°ctica: Cambiar clases CSS din√°micamente
- Ejercicio: Crear un cambio de tema (light/dark mode)

*** DESCANSO LARGO: 20 minutos ***

üïê HORA 5: EVENTOS E INTERACTIVIDAD
- Conceptos: addEventListener, tipos de eventos
- Pr√°ctica: Eventos de mouse, teclado, formularios
- Ejercicio: Formulario interactivo con validaci√≥n

üïê HORA 6-7: JSON Y FETCH API B√ÅSICO
- Conceptos: ¬øQu√© es JSON? ¬øQu√© son las APIs? (solo lo esencial)
- Pr√°ctica: Manipular objetos JSON en JavaScript
- Introducci√≥n: Fetch API - sintaxis b√°sica y promesas
- Ejercicio: Primera petici√≥n GET a una API p√∫blica

üïê HORA 8: FETCH API AVANZADO
- Conceptos: Async/await con Fetch, manejo de errores
- Pr√°ctica: GET requests con par√°metros y headers
- Ejercicio: Mostrar datos de API en el DOM din√°micamente
- Bonus: Loading states y feedback visual

*** DESCANSO LARGO: 20 minutos ***

üïê HORA 9-10: FETCH API COMPLETO (POST, PUT, DELETE)
- Conceptos: M√©todos HTTP - POST, PUT, DELETE con Fetch
- Pr√°ctica: Usar JSONPlaceholder para aprender sintaxis de CRUD
- Ejercicio: Simular CRUD completo con Fetch + LocalStorage
- Estrategia: JSONPlaceholder para aprender + LocalStorage para persistir

üïê HORA 11-12: PROYECTO FINAL - LISTA DE TAREAS
- Proyecto: App "TODO LIST" 100% frontend (HTML + CSS + JS)
- Funcionalidades: Agregar, editar, eliminar, marcar como completada
- Persistencia: LocalStorage (guardado real y permanente)
- Datos iniciales: Opcional cargar desde JSONPlaceholder al inicio
- Deploy: GitHub Pages (compatible al 100%)

RECURSOS T√âCNICOS NECESARIOS:
============================
‚úÖ Editor de c√≥digo (VS Code)
‚úÖ Navegador moderno (Chrome/Firefox)
‚úÖ Extensi√≥n Live Server para VS Code
‚úÖ APIs p√∫blicas gratuitas (JSONPlaceholder, etc.)
‚úÖ Cuenta en GitHub (para deploy en GitHub Pages)

‚ö†Ô∏è IMPORTANTE: TODO ES FRONTEND - NO SE NECESITA NODE.JS
- Fetch API es nativo del navegador
- GitHub Pages solo sirve archivos est√°ticos
- El proyecto debe funcionar con HTML + CSS + JS puro

üìã ESTRATEGIA DE DATOS:
- JSONPlaceholder: Solo para aprender Fetch API (pr√°ctica/ejercicios)
- LocalStorage: Para el proyecto final (persistencia real)
- NO usar JSON Server (requiere Node.js y no funciona en GitHub Pages)

üí° FLUJO DE APRENDIZAJE:
- Horas 6-10: Aprender Fetch API con JSONPlaceholder
- Horas 11-12: Proyecto final usando LocalStorage para guardar datos

PROYECTO FINAL SUGERIDO:
=======================
"LISTA DE TAREAS (TODO LIST)" - 100% FRONTEND
- Estructura: HTML + CSS + JavaScript puro
- Persistencia: LocalStorage (guardado permanente)
- Datos iniciales: Opcional desde JSONPlaceholder (solo al cargar por primera vez)
- Formulario para agregar nueva tarea
- Marcar tareas como completadas/pendientes
- Edici√≥n en l√≠nea de tareas existentes
- Eliminaci√≥n de tareas con confirmaci√≥n
- Filtros: Todas, Completadas, Pendientes
- B√∫squeda en tiempo real
- Interfaz moderna y responsiva
- Deploy: GitHub Pages (funciona al 100%)

METODOLOG√çA:
============
- 70% Pr√°ctica hands-on
- 20% Teor√≠a con ejemplos visuales  
- 10% Discusi√≥n y resoluci√≥n de dudas
- Cada concepto se explica + se practica inmediatamente
- Ejercicios incrementales que construyen hacia el proyecto final

EVALUACI√ìN CONTINUA:
===================
- Mini-ejercicios cada hora para verificar comprensi√≥n
- Proyecto final como evaluaci√≥n integral
- Peer review entre estudiantes
- Autoevaluaci√≥n al final de cada bloque

NOTAS:
======
- Incluir descansos de 15 minutos cada 2 horas
- Alternar teor√≠a con pr√°ctica cada 30-45 minutos
- Ejercicios progresivos de dificultad creciente
- Proyecto final que integre todos los conceptos

¬øCOMENZAMOS A CREAR EL MATERIAL DETALLADO?
==========================================
Con esta planificaci√≥n podemos crear:
1. Presentaciones interactivas (HTML)
2. Ejercicios progresivos paso a paso
3. C√≥digo base para el proyecto final
4. Recursos y cheat sheets para estudiantes
