PLANIFICACIÓN DE CLASE COMPLETA - 12 HORAS
==========================================
DOM + FETCH API + JSON + APIS EN LA NUBE

PERFIL DE ESTUDIANTES:
=====================
- Nivel: Principiantes con base sólida
- Conocimientos previos: HTML, CSS, JavaScript básico
- Objetivo: Crear aplicaciones web interactivas con APIs

ENFOQUE PEDAGÓGICO:
==================
- **Combinación:** Teoría + Ejercicios progresivos + Proyecto integrador
- **Metodología:** Aprender haciendo con ejemplos reales
- **Resultado final:** App web completa que consume APIs

TEMAS A CUBRIR EN 12 HORAS:
===========================

📚 BLOQUE 1: DOM MANIPULATION (Horas 1-5)
- ✅ Qué es el DOM y cómo funciona
- ✅ Seleccionar elementos (getElementById, querySelector, querySelectorAll)
- ✅ Modificar contenido (innerHTML, textContent, value)
- ✅ Cambiar estilos dinámicamente (style, classList)
- ✅ Eventos básicos (click, input, change, submit)
- ✅ Crear y eliminar elementos dinámicamente
- ✅ Formularios y validación en tiempo real

🌐 BLOQUE 2: JSON + FETCH API (Horas 6-9)
- ✅ Qué es JSON y cómo manipularlo
- ✅ ¿Qué son las APIs? (conceptos básicos)
- ✅ Fetch API - Sintaxis y uso práctico
- ✅ GET: Obtener datos desde APIs
- ✅ POST: Enviar datos hacia APIs
- ✅ PUT/DELETE: Actualizar y eliminar datos
- ✅ Promesas y async/await con Fetch
- ✅ Manejo de errores y estados de carga

🚀 BLOQUE 3: PROYECTO INTEGRADOR (Horas 10-12)
- ✅ Planificación de una app completa
- ✅ Integración DOM + FETCH + JSON
- ✅ CRUD completo (Create, Read, Update, Delete)
- ✅ Interfaz responsiva y user-friendly
- ✅ Deploy y pruebas finales


PROYECTO FINAL SUGERIDO:
=======================
"LISTA DE TAREAS (TODO LIST)" - 100% FRONTEND
- Estructura: HTML + CSS + JavaScript puro
- Persistencia: LocalStorage (guardado permanente)
- Datos iniciales: Opcional desde JSONPlaceholder (solo al cargar por primera vez)
- Formulario para agregar nueva tarea
- Marcar tareas como completadas/pendientes
- Edición en línea de tareas existentes
- Eliminación de tareas con confirmación
- Filtros: Todas, Completadas, Pendientes
- Búsqueda en tiempo real
- Interfaz moderna y responsiva
- Deploy: GitHub Pages (funciona al 100%)


PROGRESO ACTUAL - DECISIONES TÉCNICAS TOMADAS:
============================================

✅ BLOQUE 1: DOM MANIPULATION (COMPLETADO - Horas 1-5)
- ✅ bloqueA: Selección de elementos DOM
- ✅ bloqueB1: innerHTML vs textContent con efectos dinámicos
- ✅ bloqueB2: Sistema de temas (auto/light/dark) con localStorage
- ✅ bloqueC1: Eventos de mouse interactivos
- ✅ bloqueC2: Eventos de teclado con validaciones
- ✅ bloqueC3: Eventos de formularios con validación completa
- ✅ bloqueC4: Eventos avanzados (scroll, resize, delegation, custom events, propagación)

🔄 BLOQUE 2: JSON + FETCH API (EN PROGRESO - Horas 6-9)
Estructura definitiva decidida:

📂 DOM/bloque2/
├── bloqueD/ - JSON Fundamentals (Hora 6)
│   ├── ✅ D1: ¿Qué es JSON? Sintaxis y estructura (COMPLETADO)
│   ├── ✅ D2: JSON.parse() y JSON.stringify() (COMPLETADO)
│   ├── ✅ D3: Manipular objetos y arrays JSON (COMPLETADO)
│   └── ✅ D4: CRUD con LocalStorage - Sistema completo (COMPLETADO)
├── bloqueE/ - Fetch API Básico (Hora 7)
│   ├── ⏳ E1: ¿Qué son las APIs? Conceptos esenciales
│   ├── ⏳ E2: Introducción a Fetch API - sintaxis básica
│   ├── ⏳ E3: Primera petición GET - ReqRes
│   └── ⏳ E4: Mostrar datos de API en el DOM
├── bloqueF/ - Fetch API Avanzado (Hora 8)
│   ├── ⏳ F1: Async/await con Fetch
│   ├── ⏳ F2: Manejo de errores y try/catch
│   ├── ⏳ F3: Loading states y feedback visual
│   └── ⏳ F4: GET con parámetros y headers
├── bloqueG/ - CRUD Completo (Horas 9-10)
│   ├── ⏳ G1: POST - Enviar datos a APIs
│   ├── ⏳ G2: PUT - Actualizar datos existentes
│   ├── ⏳ G3: DELETE - Eliminar datos
│   └── ⏳ G4: CRUD integrado con LocalStorage
└── data/ - Archivos CSV iniciales

⏳ BLOQUE 3: PROYECTO INTEGRADOR (PENDIENTE - Horas 10-12)

DECISIONES TÉCNICAS ESTRATÉGICAS:
=================================

🎯 API ELEGIDA: REQRES (https://reqres.in)
✅ Más sencilla que JSONPlaceholder
✅ Datos realistas (usuarios con nombre, email, avatar)
✅ Responses consistentes y predecibles
✅ Documentación student-friendly
✅ Perfecto para simular una app real

🔄 ESTRATEGIA DE DATOS HÍBRIDA:
✅ CSV inicial: Datos base sin tipeo manual
✅ ReqRes: Para aprender sintaxis de CRUD
✅ LocalStorage: Para persistencia real en proyecto final
✅ GitHub Pages: Deploy final con URLs públicas

📁 ESTRUCTURA DE ARCHIVOS IMPLEMENTADA:
✅ Separación clara por bloques (A, B, C, D, E, F, G)
✅ HTML + CSS + JS separados por ejercicio
✅ Navegación secuencial entre bloques
✅ Panel de código dinámico en cada ejercicio
✅ Estilo consistente con variables CSS

🎨 INTERFAZ DESARROLLADA:
✅ Validadores JSON interactivos
✅ Laboratorios de parse/stringify
✅ Simulación de flujo completo de API
✅ Manejo de errores visualizado
✅ Notificaciones y feedback en tiempo real

PRÓXIMOS PASOS INMEDIATOS:
=========================
1. ⏳ Completar D4 (ejercicio práctico JSON)
2. ⏳ Crear bloqueE completo (Fetch API básico con ReqRes)
3. ⏳ Crear bloqueF (Fetch API avanzado)
4. ⏳ Crear bloqueG (CRUD completo)
5. ⏳ Proyecto final integrador

MATERIAL CREADO HASTA AHORA:
============================
📁 8 bloques completamente funcionales (A, B1, B2, C1, C2, C3, C4, D1, D2, D3)
📄 24 archivos HTML interactivos
🎨 24 archivos CSS con variables consistentes
⚙️ 24 archivos JavaScript con funcionalidades reales
🔗 Navegación completa entre todos los bloques
📱 Responsive design para móviles y tablets

ÚLTIMO BLOQUE COMPLETADO - D4 (LocalStorage CRUD):
==================================================
✅ Sistema completo de gestión de empleados
✅ CRUD completo: Crear, Leer, Actualizar, Eliminar
✅ LocalStorage como base de datos del navegador
✅ Interfaz moderna con modales, filtros y búsquedas
✅ Importación/exportación de JSON y CSV
✅ Estadísticas en tiempo real con gráficos
✅ Validaciones de formulario robustas
✅ Notificaciones tipo toast
✅ Filtros avanzados por departamento, salario, estado
✅ Archivos de datos de ejemplo (empleados.csv, departamentos.json)
✅ Clase EmpleadosManager con 600+ líneas de funcionalidad
✅ Manejo completo de errores y casos edge
✅ Funciones de reseteo y carga de datos iniciales

📂 Archivos creados para D4:
- index-d4.html (interfaz completa con tabla, formularios, modales)
- styles-d4.css (diseño moderno y responsive)
- script-d4.js (lógica completa del CRUD)
- data/empleados.csv (datos de prueba en CSV)
- data/departamentos.json (estructura de departamentos)
- data/empleados-ejemplo.json (datos adicionales de prueba)

🎯 FUNCIONALIDADES DESTACADAS DE D4:
- Sistema de gestión empresarial realista
- Persistencia total de datos en LocalStorage
- Importación masiva desde CSV/JSON
- Exportación de datos para respaldo
- Filtros complejos multi-criterio
- Estadísticas visuales automáticas
- Validación completa de datos
- UX moderna con feedback visual

PRÓXIMO: Iniciar bloqueE (Fetch API básico con ReqRes)

https://randomuser.me/api/?results=5
// Ejemplo: Obtener usuario aleatorio
fetch('https://randomuser.me/api/')
  .then(response => response.json())
  .then(data => {
    console.log('Usuario aleatorio:', data.results[0]);
  });

// Ejemplo: Obtener todos los países
fetch('https://restcountries.com/v3.1/name/{nombre}')
  .then(response => response.json())
  .then(data => {
    console.log('Lista de países:', data);
  });

// Ejemplo: Obtener imagen aleatoria de perro
fetch('https://dog.ceo/api/breeds/image/random')
  .then(response => response.json())
  .then(data => {
    console.log('Imagen de perro:', data.message);
  });
